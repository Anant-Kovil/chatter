// checklist:
// implement types everywhere
// Fix styling, look into scss instead
// fix up UI especially
// auth page

import Head from 'next/head'
// import { Input, input } from "@material-tailwind/react";
import { useState , useEffect} from "react";
import axios from 'axios';
import '@fontsource/roboto/300.css';
import '@fontsource/roboto/400.css';
import '@fontsource/roboto/500.css';
import '@fontsource/roboto/700.css';
import Button from '@mui/material/Button';
import SendIcon from '@mui/icons-material/Send';
import Stack from '@mui/material/Stack';
// import TextField from '@mui/material/TextField';
import Input from '@mui/material/Input';
import AppBar from '@mui/material/AppBar';
import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';
import CssBaseline from '@mui/material/CssBaseline';
import useScrollTrigger from '@mui/material/useScrollTrigger';
import Box from '@mui/material/Box';
import Container from '@mui/material/Container';
import TextField from '@mui/material/TextField';
import Grid from '@mui/material/Grid';
import {getAuth, signOut} from "firebase/auth";



import React from "react";
import router from 'next/router';
// import Image from 'next/image'
// import { Inter } from 'next/font/google'
// import styles from '@/styles/Home.module.css'
// import generateAction from './api/generate'

export default function Home() {
  return (
    <>
      <Head>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <Question />
    </>
  );
}

interface openAIResponse {
  role: string;
  content: string;
}

interface Props {
  window?: () => Window;
  children: React.ReactElement;
}

const styles = {
  root: {
    flexGrow: 1
  },
  typography: {
flexGrow: 1,
    align: "center"
  }
};


function Question() {

  // represents the input field
  const [inputField, setInputField] = useState("");

  // Represents the messages as an array
  const [messages, setMessages] = useState<string[]>([]);

  // represents the api output, fine tuning here (add more prompts, etc.)
  const basePromptPrefix = "You are a personal finance guru that specializes in personal finance. Keep answers short. ";
  const [apiOutput, setApiOutput] = useState<openAIResponse[]>([{"role": "system", "content": `${basePromptPrefix}`}]);

  // represents the state of the button
  const [isGenerating, setIsGenerating] = useState(false)

  // used to debug api output
  // useEffect(() => {
  //   console.log(apiOutput);
  // }, [apiOutput]);

  // function that update app accordingly when a user either hits enter or clicks the button for the chat
  const click = () => {
    if (inputField == "") {
      return;
    }
    if (isGenerating) {
      return;
    }
    setMessages((prevMessages) => [...prevMessages, "You: " + inputField]);
    // Adding what the user is asking the bot
    setApiOutput((prevApi) => [...prevApi, {role: "user", content: inputField}]);
    // sets it to true to call the generate endpoint
    setIsGenerating(true);
    

    // callGenerateEndpoint();
    setInputField("");
  }

  // useEffect that calls the generate endpoint when the apiOutput is updated
  useEffect(() => {
    if (!isGenerating) {
      return;
    } else if(apiOutput.length > 0) {
      callGenerateEndpoint();
    }
  }, [apiOutput]);

  // function that calls the generate endpoint
  const callGenerateEndpoint = async () => {
    console.log("Calling OpenAI...")

    try {
      console.log("API log before request: " + [apiOutput])
      const response = await axios.post('/api/generate', {
        userInput: apiOutput,
      });
      const data = await response.data;
      const { output } = data;   

      // Adding the response from the bot
      setApiOutput((prevApi) => [...prevApi, output]);
      console.log("OpenAI replied...", output.content);
      setMessages((prevMessages) => [...prevMessages, "Bot: " + output.content]);
    } catch (error) {
      console.log("Error calling OpenAI API:", error);
    } finally {
      setIsGenerating(false);
    }
  }

  function ElevationScroll(props: Props) {
    const { children, window } = props;
    // Note that you normally won't need to set the window ref as useScrollTrigger
    // will default to window.
    // This is only being set here because the demo is in an iframe.
    const trigger = useScrollTrigger({
      disableHysteresis: true,
      threshold: 0,
      target: window ? window() : undefined,
    });
  
    return React.cloneElement(children, {
      elevation: trigger ? 4 : 0,
    });
  }

  const handleLogout = () => {
    signOut(auth).then((res) => {
      console.log("Signed out successfully");
      router.push('/')
    });
  }

  const auth = getAuth();

  const authStateChangeHandle = (authState: any) => {
    if (!authState) {
      console.log("User is not logged in");
      router.push('/');
    } else {
      console.log("User is logged in");
    }
  }

  // handle protected routes
  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged(authStateChangeHandle)

    return () => unsubscribe();
    } , []);

  return (
    <div>

<React.Fragment>
  <CssBaseline />
  <ElevationScroll>
    <AppBar color="inherit">
      <Toolbar sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Typography variant="h6" component="div">
          ChatterAI
        </Typography>
        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
        <p style={{ margin: 0 }}>
            Welcome, {auth.currentUser?.displayName}
          </p>
          </Box>
          <Button variant="contained" onClick={handleLogout} sx={{ ml: 1 }}>
            Sign out
          </Button>
      </Toolbar>
    </AppBar>
  </ElevationScroll>
  <Toolbar />
  <Container>


      
      <p className="text-slate-600">
      DISCLAIMER: This website is designed to provide general information and guidance on personal finance topics. 
      It is not a substitute for professional financial advice, and we encourage you to seek the advice of a qualified 
      financial advisor for personalized recommendations. The information provided by this chatbot is based on the best 
      available resources and practices, but we cannot guarantee the accuracy, completeness, or reliability of the information. 
      By using this chatbot, you agree that we shall not be liable for any damages or losses arising from your use of, or reliance on, 
      the information provided by this chatbot.
    </p>
    <br></br>

      { // Represents the input field in form, what's happening is when you input something, 
        // the change function is taking care of the update in the box.  Also calls the click method
        // when a user hits enter :)
      }

      <Stack direction="row" spacing={2} alignItems="flex-center" justifyContent="center">  
      
      <TextField 
          onChange={(e:any) => {setInputField(e.currentTarget.value)}}
          value={inputField}
          onKeyPress = {(e:any) => {if (e.key === "Enter") {click()}}}
          id="outlined-multiline-static"
          label="Enter your question"
          defaultValue="Default Value"
          fullWidth = {true}
        />

      <Button onClick={click} 
      variant="contained" 
      endIcon={<SendIcon />}>
        Send
      </Button>
      </Stack>
      
      <div>
        {messages.length > 0 && (
          <p>
            Messages: <br />
            {messages.map((element, index) => (
              <p key={index}>{element}</p>
            ))}
          </p>
        )}
      </div>


    </Container>
    </React.Fragment>
    </div>
  );
}